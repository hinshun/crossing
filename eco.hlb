export server
export crossing
export dll
export decompileAll

string server() {
	"138.68.57.59"
}

fs crossing() {
	copy output "Crossing.dll" "Crossing.dll"
	copy output "Discord.Net.Commands.dll" "Discord.Net.Commands.dll"
	copy output "Discord.Net.Core.dll" "Discord.Net.Core.dll"
	copy output "Discord.Net.Rest.dll" "Discord.Net.Rest.dll"
	copy output "Discord.Net.WebSocket.dll" "Discord.Net.WebSocket.dll"
	copy output "Discord.Net.Webhook.dll" "Discord.Net.Webhook.dll"
}

fs inspect() {
	image "alpine"
	run "ls -la" with option {
		dir "/in"
		mount output "/in"
	}
}

fs build() {
	dotnet
	run "dotnet publish -o /out" with option {
		dir "/in"
		mount src "/in"
		mount dll "/in/dll" with readonly
		mount scratch "/out" as output
	}
}

fs src() {
	local "." with option {
		includePatterns "**/*.cs" "Crossing.csproj"
	}
}

fs eco() {
	# image "strangeloopgames/eco-game-server:0.9.0.1-beta"
	image "strangeloopgames/eco-game-server:0.9.0.2-beta-staging-1788"
}

fs _microsoftDeb() {
	image "alpine"
	run "apk add -U curl"
	run "curl -fL https://packages.microsoft.com/config/ubuntu/19.10/packages-microsoft-prod.deb -o /out/packages-microsoft-prod.deb" with option {
		mount scratch "/out" as microsoftDeb
	}
}

fs dotnet() {
	image "debian"
	run "apt-get update && apt-get install --no-install-recommends -y apt-transport-https ca-certificates"
	run "dpkg -i /in/packages-microsoft-prod.deb" with option {
		mount microsoftDeb "/in" with readonly
	}
	run "apt-get update && apt-get install --no-install-recommends -y netbase dotnet-sdk-3.1 libc6 libgcc1 libgssapi-krb5-2 libicu63 libssl1.1 libstdc++6 zlib1g"
}

fs listDll() {
	image "alpine"
	run "ls -la" with option {
		ignoreCache
		dir "/in"
		mount dll "/in"
	}
}

fs _dll() {
	eco
	run `find . -name "*.dll" ! -name "Microsoft.*" ! -name "System.*" -exec cp {} /out \;` with option {
		dir "/app"
		mount scratch "/out" as dll
	}
}

fs ilspycmd() {
	dotnet
	run "dotnet tool install ilspycmd -g"
}

fs webclient() {
	copy eco "/app/WebClient" "/"
	download "../webclient"
}

fs decompileAll() {
	copy decompile("Eco.Core.dll") "/" "/"
	copy decompile("Eco.Gameplay.dll") "/" "/"
	# Cannot decompile ModKit even with 32GB RAM.
	# copy decompile("Eco.ModKit.dll") "/" "/"
	copy decompile("Eco.Networking.ENet.dll") "/" "/"
	copy decompile("Eco.Plugins.dll") "/" "/"
	copy decompile("Eco.Shared.dll") "/" "/"
	copy decompile("Eco.Simulation.dll") "/" "/"
	copy decompile("Eco.Stats.dll") "/" "/"
	copy decompile("Eco.WebServer.dll") "/" "/"
	copy decompile("Eco.World.dll") "/" "/"
	copy decompile("Eco.WorldGenerator.dll") "/" "/"
	# Not sure if useful.
	# copy decompile("EcoServer.dll") "/" "/"
}

fs _decompile(string assembly) {
	ilspycmd
	run "/root/.dotnet/tools/ilspycmd /in/${assembly} -o /out" with option {
		mount dll "/in"
		mount scratch "/out" as decompile
	}
}

fs new() {
	classlib
	download "."
}

fs _classlib() {
	dotnet
	run "dotnet new classlib" with option {
		dir "/out"
		mount scratch "/out" as classlib
	}
}
